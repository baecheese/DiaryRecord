//
//  WedgetManager.swift
//  DiaryRecord
//
//  Created by Î∞∞ÏßÄÏòÅ on 2017. 3. 29..
//  Copyright ¬© 2017ÎÖÑ baecheese. All rights reserved.
//

import UIKit

/** 0. ÎûúÎç§ (default) / 1. Í≥ºÍ±∞Ïùò Ïò§Îäò / 2.Ïä§ÌéòÏÖúÎç∞Ïù¥: 1Í∞úÎßå */
struct WedgetMode {
    let list = ["ÎûúÎç§", "Í≥ºÍ±∞Ïùò Ïò§Îäò", "ÌäπÎ≥ÑÌïú ÎÇ† (ÏÇ¨Ïö©Ïûê ÏßÄÏ†ï)"]
}

struct LocalKey {
    let mode = "wedgetMode"
}

/** ÏúÑÏ†ØÏóê ÎÑòÍ∏∞Îäî Ïö©ÏúºÎ°ú Ïì∞Îäî Í≤É */
struct GroupKeys {
    let suiteName = "group.com.baecheese.DiaryRecord"
    let id = "ID"
    let contents = "WedgetContents"
    let image = "ImageFile"
    let date = "Date"
//     let vipContetns = "VIPWedgetContents"
//     let vipImage = "VIPImageFile"

}

/** üìÅ LocalKeys : wedgetMode
 üì± GroupKeys : let suiteName = "group.com.baecheese.DiaryRecord" /
 let id = "ID"  /
 let contents = "WedgetContents"  /
 let image = "ImageFile" */
class WedgetManager: NSObject {
    
    let log = Logger(logPlace: WedgetManager.self)
    let wedgetLocalKey = LocalKey()
    let wedgetGroupKey = GroupKeys()
    
    let diaryRepository = DiaryRepository.sharedInstance
    let specialDayRepository = SpecialDayRepository.sharedInstance
    let imageManager = ImageFileManager.sharedInstance
    
    let localDefaults = UserDefaults.standard
    /* WedgetContents, ImageFile **/
    let groupDefaults = UserDefaults(suiteName: GroupKeys().suiteName)

    
    private override init() {
        super.init()
    }
    
    static let sharedInstance: WedgetManager = WedgetManager()
    
    /* 0. ÎûúÎç§ (default) / 1. Í≥ºÍ±∞Ïùò Ïò§Îäò / 2.Ïä§ÌéòÏÖúÎç∞Ïù¥: 1Í∞úÎßå **/
    func setMode(number:Int) {
        localDefaults.set(number, forKey: wedgetLocalKey.mode)
        log.info(message: "wedgetMode Ï†ÄÏû• ÏôÑÎ£å : \(getMode())")
        setContentsInWedget(mode: number)
    }
    
    func setAndGetMode(number:Int) -> Int {
        localDefaults.set(number, forKey: wedgetLocalKey.mode)
        log.info(message: "ÌÖåÎßà Ï†ÄÏû• ÏôÑÎ£å : \(getMode())")
        setContentsInWedget(mode: number)
        return getMode()
    }
    
    /** ÌòÑÏû¨ ÏúÑÏ†Ø Î™®Îìú 0. ÎûúÎç§ (default) / 1. Í≥ºÍ±∞Ïùò Ïò§Îäò / 2.Ïä§ÌéòÏÖúÎç∞Ïù¥: 1Í∞úÎßå */
    func getMode() -> Int {
        if localDefaults.value(forKey: wedgetLocalKey.mode) == nil {
            return setAndGetMode(number: 0)
        }
        return localDefaults.value(forKey: wedgetLocalKey.mode) as! Int
    }
    
    func setContentsInWedget(mode:Int) {
        var diary:Diary? = nil
        
        if haveBeforeImage() {
            deleteBeforeImage()
        }
        if haveBeforeDate() {
            deleteBeforeDate()
        }
        
        if (mode == 0) {
            // default ÏúÑÏ†Ø (ÎûúÎç§)
            diary = getRandom()
        }
        if (mode == 1) {
            // Í≥ºÍ±∞Ïùò Ïò§Îäò
            diary = todayOfPast()
            if nil == todayOfPast() {
                saveContents(contents: "Í≥ºÍ±∞Ïùò Ïò§Îäò ÏùºÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
                return;
            }
        }
        if (mode == 2) {
            // Ï†ÄÏû•Ìïú ÌäπÎ≥ÑÌïú ÎÇ† Í∞ÄÏ†∏Ïò§Í∏∞
            diary = specialDay()
            if nil == diary {
                saveContents(contents: "ÌäπÎ≥ÑÌïú ÎÇ† ÏßÄÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§.")
                return;
            }
            // cheesing Ïú†Î£å ÏúÑÏ†Ø Î©§Î≤Ñ ÏóÖÎç∞Ïù¥Ìä∏Ïö©
//            if true == (specialDayRepository.isChargedMember()) {
//                let specialDayList = specialDayRepository.getAll()
//                saveForVIP(specialDays: specialDayList)
//                return;
//            }
        }
        
        saveContents(contents: (diary?.content)!)
        saveImage(imageName: diary?.imageName)
        saveDate(timestamp: (diary?.timeStamp)!)
//        saveID(id: ??) chessing
        log.info(message: "getWedgetContents : \(getWedgetContents())")
    }
    
    private func getRandom() -> Diary? {
        let allDairyList = diaryRepository.getAllList()
        if 1 < allDairyList.count {
            let lastIndex = allDairyList.count - 1
            let randomNo = arc4random_uniform(UInt32(lastIndex))// 0 ~ lastIndex
            let selectDiary = diaryRepository.findOne(id: Int(randomNo))!
            log.info(message: "Random Dairy Content: \(selectDiary.content)")
            return selectDiary
        }
        return nil
    }
    
    private func todayOfPast() -> Diary? {
        var selectDiary = Diary()
        let allDate = Array(diaryRepository.getAllByTheDate().keys)
        let today = TimeInterval().now()
        let pastTodayDate = today.minusYear(yearAmount: 1).getYYMMDD()
        var todayOfPast:[Diary] = []
        for date in allDate {
            if date == pastTodayDate {
                todayOfPast = diaryRepository.getAllByTheDate()[date]!
            }
        }
        
        if 0 < todayOfPast.count {
            let lastIndex = todayOfPast.count - 1
            let randomIndex = Int(arc4random_uniform(UInt32(lastIndex)))// 0 ~ lastIndex
            selectDiary = todayOfPast[randomIndex]
            return selectDiary
        }
        log.info(message: " Í≥ºÍ±∞Ïùò Ïò§Îäò \n \(TimeInterval().now().minusYear(yearAmount: 1).getYYMMDD()) \n ÏùºÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
        return nil
    }
    
    // -- cheesing
    private func specialDay() -> Diary? {
        let specialDayList = specialDayRepository.getAll()
        if 0 < specialDayList.count {
            let sepcialDayID = specialDayList[0].diaryID
            let selectDiary = diaryRepository.findOne(id: sepcialDayID)
            return selectDiary
        }
        return nil
    }
    // -- cheesing
    private func saveForVIP(specialDays:[SpecialDay]) {
        
        // ÏõêÎûò ÏûàÎçò Í∑∏Î£π ÎîîÌè¥Ìä∏ objectÎì§ Îã§ ÏßÄÏö∞Îäî ÏΩîÎìú Ï∂îÍ∞Ä
        
        /*
         let fristContents:String? = nil
         let fristImageName:String? = nil
         let secondContents:String? = nil
         let secondImageName:String? = nil
         
         if 0 == specialDays.count {
         
         }
         if 1 == specialDays.count {
         
         }
         if 2 == specialDays.count {
         
         }
         
         */
    }
    
    private func saveContents(contents:String) {
        let endter = "\n"
        var newContents = ""
        var count = 0
        for character in contents.characters {
            if 26 < count {
                break;
            }
            if String(character) != endter {
                newContents += String(character)
            }
            if String(character) == endter {
               newContents += " "
            }
            count += 1
        }
        groupDefaults?.set(newContents, forKey: wedgetGroupKey.contents)
    }

    private func saveImage(imageName:String?) {
        if nil != imageName {
            let image = imageManager.showImage(imageName: imageName!)
            let imageData = UIImagePNGRepresentation(image!)
            groupDefaults?.set(imageData, forKey: wedgetGroupKey.image)
//            log.info(message: " get wedgetImage : \(groupDefaults?.value(forKey: wedgetGroupKey.image))")
        }
    }
    
    func saveDate(timestamp:TimeInterval) {
        let date = timestamp.getDateLongStyle()
        groupDefaults?.set(date, forKey: wedgetGroupKey.date)
    }
    
    private func deleteBeforeImage() {
        groupDefaults?.removeObject(forKey: wedgetGroupKey.image)
    }
    
    private func haveBeforeImage() -> Bool {
        if nil == groupDefaults?.value(forKey: wedgetGroupKey.image) {
            return false
        }
        return true
    }
    
    private func deleteBeforeDate() {
        groupDefaults?.removeObject(forKey: wedgetGroupKey.date)
    }
    
    private func haveBeforeDate() -> Bool {
        if nil == groupDefaults?.value(forKey: wedgetGroupKey.date) {
            return false
        }
        return true
    }
    
    
    private func saveID(id:Int) {
        groupDefaults?.set(id, forKey: wedgetGroupKey.id)
        log.info(message: " get wedgetID : \(groupDefaults?.value(forKey: wedgetGroupKey.id))")
    }
    
    /* Ïûò Îì§Ïñ¥Í∞îÎäîÏßÄ Î°úÍ∑∏ ÌôïÏù∏ Ïö© --- Ï†ÑÏ≤¥ wdget Îç∞Ïù¥ÌÑ∞ Î≥¥Îäî Ïö©ÏúºÎ°ú Î∞îÍæ∏Í∏∞ cheesing**/
    private func getWedgetContents() -> String {
        if let groupDefaults = UserDefaults(suiteName: wedgetGroupKey.suiteName),
            let data = groupDefaults.value(forKey: wedgetGroupKey.contents) as? String {
            return data
        }
        return "ÏúÑÏ†Ø ÏÑ§Ï†ï ÎÇ¥Ïö© ÏóÜÏùå"
    }
    
    
}
